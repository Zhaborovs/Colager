import os
import sys
import time
try:
    import cv2
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å cv2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install opencv-python")
    exit(1)
try:
    import numpy as np
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å numpy. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install numpy")
    exit(1)
try:
    from PIL import Image
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PIL. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
    exit(1)

class VideoCollageProcessor:
    def __init__(self, video_folder="Video", output_folder="colage"):
        self.video_folder = video_folder
        self.output_folder = output_folder
        self.video_files = []
        
    def check_and_create_folders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ
        if not os.path.exists(self.video_folder):
            try:
                os.makedirs(self.video_folder)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.video_folder}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {self.video_folder}: {e}")
                return False
        else:
            print(f"‚úÖ –ü–∞–ø–∫–∞ {self.video_folder} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–ª–ª–∞–∂–µ–π
        if not os.path.exists(self.output_folder):
            try:
                os.makedirs(self.output_folder)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.output_folder}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {self.output_folder}: {e}")
                return False
        else:
            print(f"‚úÖ –ü–∞–ø–∫–∞ {self.output_folder} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        return True
        
    def scan_video_files(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {self.video_folder}...")
        
        if not os.path.exists(self.video_folder):
            print(f"‚ùå –ü–∞–ø–∫–∞ {self.video_folder} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
            
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
        self.video_files = []
        
        for file in os.listdir(self.video_folder):
            if any(file.lower().endswith(ext) for ext in video_extensions):
                self.video_files.append(file)
                
        if not self.video_files:
            print("‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print(f"   –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É: {self.video_folder}")
            print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(video_extensions)}")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤:")
        for i, file in enumerate(self.video_files, 1):
            file_path = os.path.join(self.video_folder, file)
            size = self.get_file_size(file_path)
            duration = self.get_video_duration(file_path)
            duration_str = f"{duration:.1f}s" if duration > 0 else "–û—à–∏–±–∫–∞"
            print(f"   {i}. {file} ({size}, {duration_str})")
            
        return True
        
    def get_file_size(self, file_path):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        size = os.path.getsize(file_path)
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"
        
    def get_video_duration(self, video_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        try:
            cap = cv2.VideoCapture(video_path)
            if not cap.isOpened():
                return 0
            fps = cap.get(cv2.CAP_PROP_FPS)
            frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
            duration = frame_count / fps
            cap.release()
            return duration
        except Exception:
            return 0
            
    def extract_screenshots(self, video_path, num_screenshots=9):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–∑ –≤–∏–¥–µ–æ"""
        cap = cv2.VideoCapture(video_path)
        
        if not cap.isOpened():
            return []
        
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        
        frame_indices = []
        for i in range(num_screenshots):
            frame_index = int((i + 0.5) * total_frames / num_screenshots)
            frame_indices.append(frame_index)
        
        screenshots = []
        
        for frame_index in frame_indices:
            cap.set(cv2.CAP_PROP_POS_FRAMES, frame_index)
            ret, frame = cap.read()
            
            if ret:
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                screenshots.append(frame_rgb)
        
        cap.release()
        return screenshots
        
    def create_collage(self, screenshots, output_path):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–∞–∂ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ 3x3"""
        if len(screenshots) != 9:
            return False
        
        base_height, base_width = screenshots[0].shape[:2]
        target_size = min(base_width, base_height)
        
        collage_width = target_size * 3
        collage_height = target_size * 3
        collage = np.zeros((collage_height, collage_width, 3), dtype=np.uint8)
        
        for i, screenshot in enumerate(screenshots):
            row = i // 3
            col = i % 3
            
            resized = cv2.resize(screenshot, (target_size, target_size))
            
            y_start = row * target_size
            y_end = (row + 1) * target_size
            x_start = col * target_size
            x_end = (col + 1) * target_size
            
            collage[y_start:y_end, x_start:x_end] = resized
        
        collage_pil = Image.fromarray(collage)
        collage_pil.save(output_path, 'JPEG', quality=95)
        
        return True
        
    def process_videos(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã"""
        print(f"\nüé¨ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(self.video_files)} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤...")
        print("=" * 60)
        
        successful = 0
        failed = 0
        
        for i, video_file in enumerate(self.video_files, 1):
            print(f"\nüìπ [{i}/{len(self.video_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {video_file}")
            
            try:
                video_path = os.path.join(self.video_folder, video_file)
                screenshots = self.extract_screenshots(video_path, 9)
                
                if len(screenshots) == 9:
                    base_name = os.path.splitext(video_file)[0]
                    output_path = os.path.join(self.output_folder, f"{base_name}.jpg")
                    
                    if self.create_collage(screenshots, output_path):
                        output_size = self.get_file_size(output_path)
                        print(f"   ‚úÖ –ö–æ–ª–ª–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {base_name}.jpg ({output_size})")
                        successful += 1
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞ –¥–ª—è {video_file}")
                        failed += 1
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å 9 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–∑ {video_file} (–ø–æ–ª—É—á–µ–Ω–æ {len(screenshots)})")
                    failed += 1
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {video_file}: {str(e)}")
                failed += 1
                
        print("\n" + "=" * 60)
        print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"   üìÅ –ö–æ–ª–ª–∞–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_folder}")
        
        return successful, failed
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üé¨ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–µ–π –∏–∑ –≤–∏–¥–µ–æ")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        if not self.check_and_create_folders():
            return False
            
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
        if not self.scan_video_files():
            return False
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        successful, failed = self.process_videos()
        
        return successful > 0

def main():
    processor = VideoCollageProcessor()
    success = processor.run()
    
    if success:
        print("\n‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main() 